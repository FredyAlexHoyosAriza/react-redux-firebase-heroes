{"version":3,"sources":["types/index.js","firebase/firebase-config.js","actions/ui.js","actions/auth.js","hooks/useForm.js","components/Sign/LoginScreen.jsx","components/Sign/RegisterScreen.jsx","data/heroes.js","components/heroes/HeroCard.jsx","components/heroes/HeroesList.jsx","selectors/getHeroesByPublisher.js","components/dc/DcScreen.jsx","components/heroes/HeroScreen.jsx","selectors/getHeroById.js","components/marvel/MarvelScreen.jsx","components/search/SearchScreen.jsx","selectors/getHeroesByName.js","components/ui/NavBar.jsx","routers/DashboardRouter.jsx","routers/PrivateRouter.jsx","routers/PublicRouter.jsx","routers/AppRouter.jsx","reducers/uiReducer.js","store/store.js","reducers/authReducer.js","HeroesApp.jsx","index.js"],"names":["types","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","googleAuthProvider","auth","GoogleAuthProvider","setError","error","type","payload","removeError","startLoading","finishLoading","login","uid","displayName","logout","useForm","initialState","useState","values","setValues","reset","handleInputChange","target","name","checked","value","LoginScreen","dispatch","useDispatch","loading","useSelector","ui","email","password","formValues","formStates","setFormStates","className","onSubmit","e","preventDefault","inputStates","isEmail","length","formVerification","signInWithEmailAndPassword","then","user","catch","err","console","log","message","startLoginWithEmailAndPassword","role","htmlFor","placeholder","id","onChange","autoComplete","required","disabled","toString","onClick","signInWithPopup","msg","to","RegisterScreen","password2","terms","trim","createUserWithEmailAndPassword","a","updateProfile","err2","registerWithEmialAndPasssword","heroes","HeroCard","superhero","alter_ego","publisher","first_appearance","characters","src","alt","HeroesList","useMemo","filter","hero","getHeroesByPublisher","map","style","padding","DcScreen","HeroScreen","heroId","useParams","navigate","useNavigate","find","getHeroById","justifyContent","fontFamily","paddingTop","paddingBottom","MarvelScreen","SearchScreen","location","useLocation","queryString","parse","search","q","searchText","toLowerCase","includes","getHeroesByName","action","NavBar","handleLogOut","signOut","isActive","DashboardRouter","path","element","PrivateRouter","children","loggedIn","pathname","useEffect","localStorage","setItem","PublicRouter","getItem","AppRouter","setLoggedIn","isAuthReloading","setIsAuthReloading","onAuthStateChanged","width","height","errMsg","reducers","combineReducers","state","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","HeroesApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da2ff476.chunk.js","sourcesContent":["// Este types exporta un array de direrentes tipos en donde se tiene relacionado lo que se usara\r\n\r\n// objeto que contiene los metodos disponibles\r\nexport const types = {\r\n\r\n    // AUTHENTICATION TYPES\r\n\r\n    // Si por algun motivo se require cambiar el nombre del type, es decir, el nombre de la\r\n    // funcion, entonces, solo debe cambiarse en este archivo, al cual tienen acceso todos\r\n    // las componentes que hagan uso de esta parametrizacion de los types.\r\n    login: '[Auth] Login', //[el tipo del metodo] la cadena con la cual se invoca el metodo\r\n    logout: '[Auth] Logout',\r\n\r\n    // USER INTERFACE TYPES\r\n\r\n    uiSetError: '[UI] Set Error',\r\n    uiRemoveError: '[UI] Remove Error',\r\n\r\n    uiStartLoading: '[UI] Start Loading',\r\n    uiFinishLoading: '[UI] Finish Loading'\r\n}","// importaciones de compatibilidad traidas de:\r\n// https://firebase.google.com/docs/web/modular-upgrade\r\n// v9 compat packages are API compatible with v8 code\r\nimport firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\n\r\n// Configuracion traida del proyecto creado en firebase:\r\n// https://console.firebase.google.com/project/react-heroes-auth/overview?hl=es\r\n// Your web app's Firebase configuration\r\n// Import the functions you need from the SDKs you need\r\n// import { initializeApp } from \"firebase/app\";\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyB3TgSPsBRw7FQ2jmjAPasOAU14bnoQSR0\",\r\n    authDomain: \"react-heroes-auth.firebaseapp.com\",\r\n    projectId: \"react-heroes-auth\",\r\n    storageBucket: \"react-heroes-auth.appspot.com\",\r\n    messagingSenderId: \"943072393696\",\r\n    appId: \"1:943072393696:web:af463249de653598c21385\"\r\n};\r\n// Initialize Firebase\r\n// const app = initializeApp(firebaseConfig);\r\n\r\n// Puesto que no usaremos initializeApp que se importa desde firebase/app sino\r\n// firebase que se importa desde firebase/compat/app donde el compat indica\r\n// compatibilidad, entonces, la linea en el comentario anterior se reemplaza con:\r\nfirebase.initializeApp(firebaseConfig); // Ahora nuestro firebase esta operativo\r\n\r\n// Ahora creamos nuestro base de datos usando el filestore de firebase\r\nconst db = firebase.firestore();\r\n// Creamos un nuevo objeto de la clase GoogleAuthProvider que nos entrega firebase\r\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\n// Ahora tanto db como googleAuthProvider son exportados para que puedan ser\r\n// usados en otros componentes\r\nexport { firebase, db, googleAuthProvider };\r\n\r\n","import { types } from \"../types\"\r\n\r\nexport const setError = (error) => {\r\n    return {\r\n        type: types.uiSetError,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport const removeError = () => {\r\n    return {\r\n        type: types.uiRemoveError\r\n    }\r\n}\r\n\r\nexport const startLoading = () => {\r\n    return {\r\n        type: types.uiStartLoading,\r\n    }\r\n}\r\n\r\nexport const finishLoading = () => {\r\n    return {\r\n        type: types.uiFinishLoading,\r\n    }\r\n}","import { types } from \"../types\"\r\nimport { googleAuthProvider, firebase } from \"../firebase/firebase-config\";\r\nimport { finishLoading, startLoading } from \"./ui\";\r\n\r\n// Puesto que las llamdas a metodos login se ejecutan desde el handleLogin\r\n// en el LoginScreen, entonces lo normal es llamar starLoginWithEmailPassword alli\r\nexport const startLoginWithEmailAndPassword = (email, password) => {\r\n    // Puesto que esta funcion es asincrona, entonces, en el return no se\r\n    // devuelve un objeto sino que devolvemos una callback function que\r\n    // en su interior ejecuta la parte asincrona\r\n    return (dispatch) => {\r\n        // Inicialmente por precaucion desabilitamos el boton submit\r\n        dispatch(startLoading()); // se usa el dispatch sincrono\r\n\r\n        // Usando email y password, se verifica si existe el user al\r\n        // interior del objeto firebase, y si existe coincidencia, se\r\n        // establece el estado de dicho user en la app\r\n\r\n        // Se quiere que la autenticacion se realice verificando que\r\n        // el usuario ya exista en nuestro proyecto de firebase, para\r\n        // ello firebase cuenta con un metodo que permite autenticacion\r\n        firebase.auth().signInWithEmailAndPassword(email, password)\r\n            .then(({ user }) => {\r\n                // actualizamos el estado al llamar al action login en el\r\n                // argumento del dispatch que a la vez se recibe como\r\n                // argumento de este callback function y enviado desde un\r\n                // dispatch igualado al useDispatch de react-redux\r\n                dispatch(login(user.uid, user.displayName))\r\n                // La parte asincrona se ejecuta por fuera del dispatch y\r\n                // cuando esta se resuelve entonces el dispatch se ejecuta\r\n                // de manera sincrona comun y corriente\r\n                dispatch(finishLoading()); // se usa el dispatch sincrono\r\n            })\r\n            .catch((err) => {\r\n                console.log(err.message)\r\n                dispatch(finishLoading(false)); // se usa el dispatch sincrono\r\n            });\r\n    }\r\n}\r\n\r\n// Al realizar autenticaciones con email y password de firebase, este no tiene\r\n// de donde obtener el nombre de usuario por ello debemos enviarselo. Pero al\r\n// trabajar con autenticaciones, con Google, Facebook, Twiter, Github, etc,\r\n// todas estas ya tienen un nombre de usuario que es posible consultar\r\nexport const registerWithEmialAndPasssword = (name, email, password) => {\r\n    // El middleware thunk previamente instalado, nos permite ejecutar acciones\r\n    // asincronas, con funciones que en lugar de retornar un objeto retornnan una\r\n    // callback function, a la cual le es enviado implicitamente un dispatch que\r\n    // recibe como argumento\r\n    return (dispatch) => {\r\n        dispatch(startLoading());\r\n\r\n        // En mi objeto firebase se genera un nuevo user a partir de email, password y name,\r\n        // luego se establece el estado de este user en la app\r\n        firebase.auth().createUserWithEmailAndPassword(email, password)\r\n            .then(async ({ user }) => {\r\n                try {\r\n                    await user.updateProfile({\r\n                        displayName: name\r\n                    });\r\n                    dispatch(login(user.uid, name));\r\n                    dispatch(finishLoading());\r\n                } catch (err1) {\r\n                    console.log(err1.message);\r\n                    dispatch(finishLoading());\r\n                }\r\n\r\n            })\r\n            .catch((err2) => {\r\n                console.log(err2.message)\r\n                dispatch(finishLoading());\r\n            });\r\n    }\r\n\r\n}\r\n\r\nexport const startGoogleLogin = () => {\r\n    // Aqui creamos nuestra peticion asincrona, y por ende returna una callback\r\n    // function que al igual que en el caso anterior recibe un argumento dispatch el\r\n    // cual es suministrado por un dispatch creado con un useDispatch de react-redux\r\n    // en el componente LoginScreen\r\n    return (dispatch) => {\r\n        dispatch(startLoading());\r\n\r\n        // En el objeto firebase se genera un nuevo user a partir de una cuenta de\r\n        // Google. Luego se establece el estado de dicho user en la app\r\n\r\n        // Desde firebase llamamos el metodo de ingreso con ventana emergente, el\r\n        // cual, nos permite autenticarnos con Google, el cual toma como argumento\r\n        // un provider, en nuestro caso le enviaremos el googleAuthProvider que fue\r\n        // creado en el archivo firebase/firebase-config. El metodo signInWithPopup\r\n        // retorna una promesa por ello debe ser usado dentro de una async function\r\n        // o con un .then\r\n        firebase.auth().signInWithPopup(googleAuthProvider)\r\n            // dentro del objteto user del objeto devuelto se encuentran los campos\r\n            // buscados: user._delegate.displayName y user._delegate.uid, pero a pesar\r\n            // de que estos campos no esten directamente despues de user firebase me\r\n            // permite accederlos como: user.displayName y user.uid. Ademas de estos\r\n            // campos tambien podria extraerse cualquier campo que necesitemos del\r\n            // objeto user, incluso la url de nuestra foto user.photoURL. Con un\r\n            // useSelector podemos utilizar otros datos del estado\r\n            .then(({ user }) => {\r\n                dispatch(login(user.uid, user.displayName));\r\n                dispatch(finishLoading());\r\n            })\r\n            .catch((e) => {\r\n                console.log(e.msg)\r\n                dispatch(finishLoading());\r\n            });\r\n    }\r\n}\r\n\r\n// Este login es la parte sincrona, aqui no existen esperas por peticiones,\r\n// las cuales se realizan en la funciones anteriores\r\n// Usaremos esta funcion para actualizar el estado de usuario\r\nexport const login = (uid, displayName) => {\r\n    // Los actions llevan type como parametro obligatorio\r\n    return ({\r\n        type: types.login,\r\n        // contiene la actualizacion del state\r\n        // Puesto que llaves y valores tienen el mismo nobre puedo escribir:\r\n        payload: { uid, displayName }\r\n        // Lo cual es esquivalente a:\r\n        // payload: {\r\n        //     uid: uid,\r\n        //     displayName: displayName\r\n        // }\r\n    })\r\n}\r\n\r\n// Se deben crear 2 logouts, uno para eliminar el auth state y el otro para\r\n// decirle a firebase que el usuario ya no esta autenticado\r\n\r\nexport const startLogout = () => {\r\n    return async (dispatch) => {\r\n        // Se solicita al objeto firebase que cierre sesion. Recuerdese que\r\n        // firebase debe comunicarse con un servidor, es decir, es asincrono\r\n        try {\r\n            await firebase.auth().signOut();\r\n            dispatch(logout());\r\n        } catch (error) {\r\n            console.log(error.message);\r\n        }\r\n    }\r\n}\r\n\r\n// logout no requiere ser exportado ya que solo se llamara en este archivo\r\nconst logout = () => {\r\n    return ({\r\n        type: types.logout\r\n    })\r\n}","// En este archivo se crea un custom hook, o hook personalizado por usuario\r\n// Archivos de React que combinen tags y javaScript usualmente usan la\r\n// extension jsx; el presente archivo contiene codigo javaScript pero tags\r\nimport { useState } from 'react';\r\n//Este custom hook usa el useState para guardar un estado inicial de un formulario y lo\r\n// actualiza con los valores que se le envien a traves del target\r\n\r\n\r\nexport const useForm = (initialState = {}) => {\r\n\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues(initialState);\r\n    }\r\n\r\n\r\n    const handleInputChange = ({ target }) => {\r\n\r\n        if (target.type === 'checkbox') {\r\n            setValues({\r\n                ...values,\r\n                [target.name]: target.checked\r\n            });\r\n        } else {\r\n            // En un objeto no pueden existir 2 llaves con el mismo nombre, por\r\n            // ello, si se agrega un campo cuya llave existe previamente en el\r\n            // objeto, entonces, este campo reemplaza al campo anterior\r\n            setValues({\r\n                ...values,\r\n                // Los corchetes dicen a js que target.name no es el nombre de la\r\n                // llave sino una variable en la cual se encuentra este nombre\r\n                [target.name]: target.value\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    return [values, handleInputChange, reset];\r\n\r\n}","// En esta pantalla se requiere autenticar el usuario y actualizar el estado de usuario,\r\n// por ende, desde aqui se debe tener acceso a el action, el cual es un objeto en el\r\n// que se guardan los datos que se usan para actualizar el estado\r\n// Nota: se provee a traves del Provider y se obtiene a traves del context miplicito en redux\r\nimport React, { useState } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n// import { useContext } from 'react'; // useContext es otro hook\r\n// import { AuthContext } from '../../auth/authContext';\r\n// import { types } from '../../types';\r\nimport GoogleButton from 'react-google-button'\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { useDispatch, useSelector } from 'react-redux'; // este es una especie de custom hook\r\nimport { startGoogleLogin, startLoginWithEmailAndPassword } from '../../actions/auth';\r\nimport isEmail from 'validator/lib/isEmail';\r\nimport { removeError, setError } from '../../actions/ui';\r\n\r\nconst LoginScreen = () => {\r\n\r\n    // useDispatch podria recibir una funcion dispatch en particular, si no la recibe entonces\r\n    // envia su dispatch sincrono estandar para que sea ejecutado luego de una operacion asincrona\r\n    const dispatch = useDispatch()\r\n    // const {loading} = useSelector((state) => state.ui);\r\n    const loading = useSelector(({ ui }) => ui.loading);\r\n    // const errMsg = useSelector(({ ui }) => ui.errMsg);\r\n\r\n    const [formValues, handleInputChange, reset] = useForm({ // definimos el objeto initialState\r\n        email: '',\r\n        password: ''\r\n    })\r\n\r\n    const { email, password } = formValues;\r\n\r\n\r\n    const [formStates, setFormStates] = useState([true, true]);\r\n\r\n    const formVerification = () => {\r\n        const inputStates = [true, true];\r\n        if (!isEmail(email)) {\r\n            dispatch(setError('The email is invalid'));\r\n            inputStates[0] = false;\r\n        }\r\n        if (password.length < 6) {\r\n            dispatch(setError('Password is less than 6 characters'));\r\n            inputStates[1] = false;\r\n        }\r\n\r\n        return inputStates;\r\n    }\r\n\r\n    const handleLogin = (e) => {\r\n        e.preventDefault();\r\n        dispatch(removeError());\r\n\r\n        const inputStates = formVerification();\r\n        setFormStates(inputStates);\r\n\r\n        if (inputStates[0] && inputStates[1]) {\r\n\r\n            // Nunca se debe realizar ningun tipo de operacion o proceso con un estado (ni siquiera\r\n            // imprimir en consola) los unicos procesos permitidos con un estado son aquellos que se\r\n            // realizan a partir de un estado previo y que conllevan a la actualizacion del estado.\r\n            // Nunca se debe realizar 2 seteos para el mismo estado en un mismo bloque de codigo, si\r\n            // esto se hace solo prevalecera el ultimo seteo realizado en dicho bloque.\r\n\r\n            // email y password permiten obtener un uid y un displayname que devuelve firebase.\r\n            // Aqui enviamos el action login que se importa desde actions/auth\r\n            // Por ende al dar click en Login se actualiza el estado con un usuario\r\n            dispatch(startLoginWithEmailAndPassword(email, password));\r\n            reset();\r\n        }\r\n    }\r\n\r\n    const handleGoogleLogin = () => {\r\n        dispatch(startGoogleLogin())\r\n        reset(); // Solo por si entra con Google pero ya habia llenado inputs\r\n    }\r\n\r\n    return (\r\n        <div className='container-fluid'>\r\n            <h1>Login Screen</h1>\r\n            <hr />\r\n            {/* Para react las etiquetas for de html se pueden confundir con el for de js,\r\n            por ello en React estas eiquetas cambian su nombre a htmlFor. El atributo required, previamente visto en html,\r\n            impide el submit a no ser que el value en el input sea ingresado*/}\r\n            <form onSubmit={handleLogin}>\r\n                {/* {\r\n                    errMsg &&\r\n                    <div className=\"alert alert-danger\" role=\"alert\">\r\n                        {errMsg}\r\n                    </div>\r\n                } */}\r\n                {\r\n                    formStates[0] ? <></> :\r\n                        <div className=\"alert alert-warning\" role=\"alert\">\r\n                            Invalid email format\r\n                        </div>\r\n                }\r\n                {\r\n                    formStates[1] ? <></> :\r\n                        <div className=\"alert alert-warning\" role=\"alert\">\r\n                            Password is less than 6 characters\r\n                        </div>\r\n                }\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"signInEmail\" className=\"form-label\">Email address</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        placeholder='Enter your email'\r\n                        className=\"form-control\"\r\n                        id=\"signInEmail\"\r\n                        aria-describedby=\"emailHelp\"\r\n                        name='email'\r\n                        value={email}\r\n                        onChange={handleInputChange}\r\n                        autoComplete='on'\r\n                        required\r\n                    />\r\n                    <div id=\"emailHelp\" className=\"form-text\">We'll never share your email with anyone else.</div>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"signInPassword\" className=\"form-label\">Password</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder='Enter your password'\r\n                        className=\"form-control\"\r\n                        id=\"signInPassword\"\r\n                        name='password'\r\n                        value={password}\r\n                        onChange={handleInputChange}\r\n                        autoComplete='off'\r\n                        required />\r\n                </div>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-outline-primary w-100 mb-3\"\r\n                    disabled={loading}\r\n                >\r\n                    Login with email and password: {loading.toString()}\r\n                </button>\r\n            </form>\r\n\r\n            <div className='w-100'>\r\n                <span className=\"form-text fw-bold\">Or enter using your Google account.</span>\r\n                <GoogleButton className='w-100' disabled={loading} onClick={handleGoogleLogin} />\r\n                <hr />\r\n                <Link to='/register'>Register new user</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginScreen","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useForm } from \"../../hooks/useForm\";\r\nimport isEmail from 'validator/lib/isEmail';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { removeError, setError } from \"../../actions/ui\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { registerWithEmialAndPasssword } from \"../../actions/auth\";\r\n\r\nconst RegisterScreen = () => {\r\n\r\n    // Custom hooks de react-redux\r\n    const dispatch = useDispatch();\r\n    // Este custom hook nos permite acceder al state de cada reducer almacenado en la store\r\n    // const errMsg = useSelector(({ ui }) => ui.errMsg);\r\n    const loading = useSelector(({ ui }) => ui.loading);\r\n\r\n    const [formValues, handleInputChange, reset] = useForm({ // definimos el objeto initialState\r\n        // Para no estar escribiendo los campos en las pruebas inicializamos los campos llenos,\r\n        // pero normalmente se inicializan vacios y el checkbox se inicializa en false\r\n        name: 'Carlos',\r\n        email: 'bety10@gmail.com',\r\n        password: '123456',\r\n        password2: '123456',\r\n        // se inicializa en false ya cuando  hacemos submit se llama a reset que restablece el\r\n        // estado inicial false y por ende el check se hace uncheck\r\n        terms: true\r\n    })\r\n\r\n    const { name, email, password, password2, terms } = formValues;\r\n\r\n    const [formStates, setFormStates] = useState([true, true, true, true]);\r\n\r\n    const formVerification = () => {\r\n        const inputStates = [true, true, true, true];\r\n        if (name.trim().length < 2) {\r\n            dispatch(setError('The name has to be 2 characters long at less'));\r\n            inputStates[0] = false;\r\n        }\r\n        if (!isEmail(email)) {\r\n            dispatch(setError('The email is invalid'));\r\n            inputStates[1] = false;\r\n        }\r\n        if (password.length < 6 || password !== password2) {\r\n            dispatch(setError('Invalid password confirmation or password is less than 6 characters'));\r\n            inputStates[2] = false;\r\n        }\r\n        if (!terms) {\r\n            dispatch(setError('You must agree with the terms conditions to continue'));\r\n            inputStates[3] = false\r\n        }\r\n        return inputStates;\r\n    }\r\n\r\n    const handleRegister = (e) => {\r\n        e.preventDefault();\r\n        dispatch(removeError());\r\n\r\n        const inputStates = formVerification();\r\n        setFormStates(inputStates);\r\n\r\n        if (inputStates[0] && inputStates[1] && inputStates[2] && inputStates[3]) {\r\n            console.log(name, email, password, password2, terms);\r\n            dispatch(registerWithEmialAndPasssword(name, email, password));\r\n            reset();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='container-fluid'>\r\n            <h1>Register Screen</h1>\r\n            <hr />\r\n            <form onSubmit={handleRegister}>\r\n                {/* {\r\n                    errMsg &&\r\n                    <div className=\"alert alert-danger\" role=\"alert\">\r\n                        {errMsg}\r\n                    </div>\r\n                } */}\r\n\r\n                {\r\n                    formStates[0] ? <></> :\r\n                        <div className=\"alert alert-warning\" role=\"alert\">\r\n                            The name has to be 2 characters long at less\r\n                        </div>\r\n                }\r\n                {\r\n                    formStates[1] ? <></> :\r\n                        <div className=\"alert alert-warning\" role=\"alert\">\r\n                            Invalid email format\r\n                        </div>\r\n                }\r\n                {\r\n                    formStates[2] ? <></> :\r\n                        <div className=\"alert alert-warning\" role=\"alert\">\r\n                            Invalid password confirmation or password is less than 6 characters\r\n                        </div>\r\n                }\r\n                {\r\n                    formStates[3] ? <></> :\r\n                        <div className=\"alert alert-warning\" role=\"alert\">\r\n                            You must agree with the terms conditions to continue\r\n                        </div>\r\n                }\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"signInName\" className=\"form-label\">Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder='Enter your name'\r\n                        className=\"form-control\"\r\n                        id=\"signInName\"\r\n                        name='name'\r\n                        value={name}\r\n                        onChange={handleInputChange}\r\n                        autoComplete='off'\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"signInEmail\" className=\"form-label\">Email address</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        placeholder='Enter your email'\r\n                        className=\"form-control\"\r\n                        id=\"signInEmail\"\r\n                        aria-describedby=\"emailHelp\"\r\n                        name='email'\r\n                        value={email}\r\n                        onChange={handleInputChange}\r\n                        autoComplete='on'\r\n                        required\r\n                    />\r\n                    <div id=\"emailHelp\" className=\"form-text\">We'll never share your email with anyone else.</div>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"signInPassword\" className=\"form-label\">Password</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder='Enter the password'\r\n                        className=\"form-control\"\r\n                        id=\"signInPassword\"\r\n                        name='password'\r\n                        value={password}\r\n                        onChange={handleInputChange}\r\n                        autoComplete='off'\r\n                        required />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"signInPassword2\" className=\"form-label\">Confirm password</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder='Repeat the password'\r\n                        className=\"form-control\"\r\n                        id=\"signInPassword2\"\r\n                        name='password2'\r\n                        value={password2}\r\n                        onChange={handleInputChange}\r\n                        autoComplete='off'\r\n                        required />\r\n                </div>\r\n                <div className=\"mb-3 form-check\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        className=\"form-check-input\"\r\n                        id=\"checkIflogged\"\r\n                        name='terms'\r\n                        // El atributo value de un checkbox se llama checked \r\n                        checked={terms} // El atributo checked es para escritura\r\n                        // value={ terms } // El atributo value es para lectura, por ende no es requerido aqui\r\n                        onChange={handleInputChange}\r\n                    // required\r\n                    />\r\n                    <label className=\"form-check-label\" htmlFor=\"checkIflogged\">Accept terms and conditions</label>\r\n                </div>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-outline-primary w-100 mb-3\"\r\n                    disabled={loading}\r\n                >\r\n                    Sign up: {loading.toString()}\r\n                </button>\r\n            </form>\r\n\r\n            <div>\r\n                <hr />\r\n                <Link to='/login'>I have an account</Link>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","export const heroes = [\r\n    {\r\n        'id': 'dc-batman',\r\n        'superhero':'Batman', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Bruce Wayne',\r\n        'first_appearance':'Detective Comics #27',\r\n        'characters':'Bruce Wayne'\r\n    },\r\n    {\r\n        'id': 'dc-superman',\r\n        'superhero':'Superman', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Kal-El',\r\n        'first_appearance':'Action Comics #1',\r\n        'characters':'Kal-El'\r\n    },\r\n    {\r\n        'id': 'dc-flash',\r\n        'superhero':'Flash', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Jay Garrick',\r\n        'first_appearance':'Flash Comics #1',\r\n        'characters':'Jay Garrick, Barry Allen, Wally West, Bart Allen'\r\n    },\r\n    {\r\n        'id': 'dc-green',\r\n        'superhero':'Green Lantern', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Alan Scott',\r\n        'first_appearance':'All-American Comics #16',\r\n        'characters':'Alan Scott, Hal Jordan, Guy Gardner, John Stewart, Kyle Raynor, Jade, Sinestro, Simon Baz'\r\n    },\r\n    {\r\n        'id': 'dc-arrow',\r\n        'superhero':'Green Arrow', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Oliver Queen',\r\n        'first_appearance':'More Fun Comics #73',\r\n        'characters':'Oliver Queen'\r\n    },\r\n    {\r\n        'id': 'dc-wonder',\r\n        'superhero':'Wonder Woman', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Princess Diana',\r\n        'first_appearance':'All Star Comics #8',\r\n        'characters':'Princess Diana'\r\n    },\r\n    {\r\n        'id': 'dc-martian',\r\n        'superhero':'Martian Manhunter', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'J\\'onn J\\'onzz',\r\n        'first_appearance':'Detective Comics #225',\r\n        'characters':'Martian Manhunter'\r\n    },\r\n    {\r\n        'id': 'dc-robin',\r\n        'superhero':'Robin/Nightwing', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Dick Grayson',\r\n        'first_appearance':'Detective Comics #38',\r\n        'characters':'Dick Grayson'\r\n    },\r\n    {\r\n        'id': 'dc-blue',\r\n        'superhero':'Blue Beetle', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Dan Garret',\r\n        'first_appearance':'Mystery Men Comics #1',\r\n        'characters':'Dan Garret, Ted Kord, Jaime Reyes'\r\n    },\r\n    {\r\n        'id': 'dc-black',\r\n        'superhero':'Black Canary', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Dinah Drake',\r\n        'first_appearance':'Flash Comics #86',\r\n        'characters':'Dinah Drake, Dinah Lance'\r\n    },\r\n    {\r\n        'id': 'marvel-spider',\r\n        'superhero':'Spider Man', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Peter Parker',\r\n        'first_appearance':'Amazing Fantasy #15',\r\n        'characters':'Peter Parker'\r\n    },\r\n    {\r\n        'id': 'marvel-captain',\r\n        'superhero':'Captain America', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Steve Rogers',\r\n        'first_appearance':'Captain America Comics #1',\r\n        'characters':'Steve Rogers'\r\n    },\r\n    {\r\n        'id': 'marvel-iron',\r\n        'superhero':'Iron Man', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Tony Stark',\r\n        'first_appearance':'Tales of Suspense #39',\r\n        'characters':'Tony Stark'\r\n    },\r\n    {\r\n        'id': 'marvel-thor',\r\n        'superhero':'Thor', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Thor Odinson',\r\n        'first_appearance':'Journey into Myster #83',\r\n        'characters':'Thor Odinson'\r\n    },\r\n    {\r\n        'id': 'marvel-hulk',\r\n        'superhero':'Hulk', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Bruce Banner',\r\n        'first_appearance':'The Incredible Hulk #1',\r\n        'characters':'Bruce Banner'\r\n    },\r\n    {\r\n        'id': 'marvel-wolverine',\r\n        'superhero':'Wolverine', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'James Howlett',\r\n        'first_appearance':'The Incredible Hulk #180',\r\n        'characters':'James Howlett'\r\n    },\r\n    {\r\n        'id': 'marvel-daredevil',\r\n        'superhero':'Daredevil', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Matthew Michael Murdock',\r\n        'first_appearance':'Daredevil #1',\r\n        'characters':'Matthew Michael Murdock'\r\n    },\r\n    {\r\n        'id': 'marvel-hawkeye',\r\n        'superhero':'Hawkeye', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Clinton Francis Barton',\r\n        'first_appearance':'Tales of Suspense #57',\r\n        'characters':'Clinton Francis Barton'\r\n    },\r\n    {\r\n        'id': 'marvel-cyclops',\r\n        'superhero':'Cyclops', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Scott Summers',\r\n        'first_appearance':'X-Men #1',\r\n        'characters':'Scott Summers'\r\n    },\r\n    {\r\n        'id': 'marvel-silver',\r\n        'superhero':'Silver Surfer', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Norrin Radd',\r\n        'first_appearance':'The Fantastic Four #48',\r\n        'characters':'Norrin Radd'\r\n    }\r\n]","import { Link } from \"react-router-dom\"\r\n// El tener una tarjeta en un componente esta puede ser reciclado en nuestro codigo\r\nconst HeroCard = ({ id, superhero, publisher, alter_ego, first_appearance, characters }) => {\r\n    // const editorial = publisher.toLowerCase();\r\n    return (\r\n        // Cada tarjeta sera un col; esto ajusta automaticamente los anchos\r\n        <div className=\"col\">\r\n            <div className=\"card\">\r\n                <img src={`/assets/${id}.jpg`} className=\"card-img-top\" alt={superhero} />\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{superhero}</h5>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        <li className=\"list-group-item\">Alter ego: {alter_ego}</li>\r\n                        <li className=\"list-group-item\">First appearance: {first_appearance}</li>\r\n                        <li className=\"list-group-item\">Characters: {characters}</li>\r\n                    </ul>\r\n                    <div className=\"card-footer\">\r\n                        <Link to={`/hero/${id}`}>Ver mejor...</Link>\r\n                        {/* `/${editorial}/${id}` */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeroCard\r\n","import { getHeroesByPublisher } from \"../../selectors/getHeroesByPublisher\";\r\nimport HeroCard from \"./HeroCard\";\r\nimport { useMemo } from \"react\";\r\n\r\nconst HeroesList = ({ publisher }) => {\r\n\r\n    // Para todas las variables que se usen en el return y que no sean un estado, es preferible usar useMemo.\r\n    // Aunque en este caso yo no veo la diferencia de no usarlo\r\n\r\n    // const heroes = getHeroesByPublisher(publisher)\r\n    const heroes = useMemo(() => getHeroesByPublisher(publisher), [publisher])\r\n        .map(hero => (\r\n            // Siempre que se este imprimiendo multiples veces un mismo elemento se requiere usar un key,\r\n            // pero el key no es una prop\r\n            // Se envian las props desestructuradas {...hero}\r\n            <HeroCard key={hero.id} {...hero} />\r\n        ));\r\n\r\n    return (\r\n        // style={{fontFamily: 'cursive'}}\r\n        <div style={{ padding: '1%' }}>\r\n            <h1>{publisher}</h1>\r\n            <hr />\r\n            {/* row-cols-md-5: cada hijo (col) de este div ocupa 1/5 del espacio en una fila en tamaño md */}\r\n            <div className=\"row row-cols-xs-2 row-cols-sm-3 row-cols-md-5 g-4\">\r\n                {heroes}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeroesList\r\n","// Esta es solo una funcion no un componente (su nombre empieza en minuscula)\r\nimport { heroes } from '../data/heroes';\r\n\r\nexport const getHeroesByPublisher = (publisher) => {\r\n    if (publisher) {\r\n        return heroes.filter((hero) => hero.publisher === publisher);\r\n    } else return null;\r\n}","import React from 'react'\r\nimport HeroesList from '../heroes/HeroesList'\r\n\r\nconst DcScreen = () => {\r\n    return (\r\n        <div>\r\n        <HeroesList publisher='DC Comics'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DcScreen\r\n","import React, { useMemo } from 'react'\r\nimport { useParams, useNavigate, Navigate } from 'react-router-dom'\r\nimport { getHeroById } from '../../selectors/getHeroById';\r\n\r\n// Object { \"*\": \"hero/marvel-captain\", heroId: \"marvel-captain\" }\r\n// El asterisco representa el current path o la ruta actual, es decir, 'hero/marvel-captain',\r\n// el campo heroId es todo lo que se define luego de 'hero/', tal y como se establecio en el\r\n// DashboardRouter\r\n\r\nconst HeroScreen = () => {\r\n    const { heroId } = useParams();\r\n    const navigate = useNavigate() ;\r\n    // const hero = getHeroById(heroId);\r\n    // console.log(hero);\r\n    // pero es mejor tener todos los campos del objeto desestruturados\r\n    // try { // Si no encuentra el heroId se regresa a la raiz, sin doblar el uso de la memoria\r\n    //     var { id, superhero, publisher, alter_ego, first_appearance, characters } = getHeroById(heroId);\r\n    // } catch (error) {\r\n    //     return <Navigate to='/' />;        \r\n    // }\r\n\r\n    // Si agregamos nuevo contenido a nuestra HeroCard como un campo en el que constantemente se actualice un gif,\r\n    // esto implicaria un cambio en el estado general de nuestro componente, por lo cual todos los metodo en el\r\n    // componente se volverian a llamar. Para evitar al rellamado de funciones cuyos parametros (dependencias) no\r\n    // han cambiado, es necesario usar el hook useMemo\r\n\r\n    // getHeroById(heroId)\r\n    const hero = useMemo(() => getHeroById(heroId), [heroId]);\r\n    if (!hero) {\r\n        // En caso de una busqueda fallida, no se debe ejecutar un return vacio; un componente debe\r\n        // retornar un componente, por ello en lugar de un return sin contenido podemos hacer uso\r\n        // del componente Navigate que nos dirige hacia una ruta deseada, en este caso la ruta raiz\r\n        return <Navigate to='/marvel' />;\r\n    }\r\n    const { id, superhero, publisher, alter_ego, first_appearance, characters } = hero;\r\n\r\n    const handleBack = () => {\r\n        // Enviando un -1 a la funcion navigate esta nos devuelve a la ruta anterior\r\n        // En versiones anteriores de React esto se lograba realizando operaciones sobre el history\r\n       navigate(-1);\r\n    }\r\n\r\n    return (\r\n        // <b></b> equivale a className='fw-bold'.  margin-top: 5x  -> className='mt-5'\r\n        <div className=\"card container\"\r\n            style={{ justifyContent: 'center', fontFamily: 'cursive', paddingTop: '1%', paddingBottom: '1%' }}\r\n        >\r\n            <div className=\"row g-0\">\r\n                <div className='col-md-4 p-2'>\r\n                    <img src={`/assets/${id}.jpg`} className=\"card-img-top\" alt={superhero} />\r\n                </div>\r\n                <div className='col-md-8'>\r\n                    <div className=\"card-body\">\r\n                        <br />\r\n                        <h1 className=\"card-title\"><b>{publisher}</b></h1>\r\n                        <hr />\r\n                        <ul className=\"list-group list-group-flush\">\r\n                            <li className=\"list-group-item\"><h2>Superhero: {superhero}</h2></li>\r\n                            <li className=\"list-group-item\"><h3>Alter ego: {alter_ego}</h3></li>\r\n                            <li className=\"list-group-item\"><h3>First appearance: {first_appearance}</h3></li>\r\n                            <li className=\"list-group-item\"><h3>Characters: {characters}</h3></li>\r\n                        </ul>\r\n                        <div className=\"card-footer\">\r\n                            {/* <Link to={`/hero/${id}`}><h3>Regresar</h3></Link> */}\r\n                            <button\r\n                            className='btn btn-primary w-100'\r\n                            // Los eventos onClick no recargan la pagina, si lo hacen los eventos submit\r\n                            onClick={handleBack}\r\n                            >\r\n                            Regresar\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeroScreen\r\n","// Esta es solo una funcion no un componente (su nombre empieza en minuscula)\r\nimport { heroes } from \"../data/heroes\";\r\n\r\nexport const getHeroById = (id) => {\r\n  if (id) { // id unico, find para encontrar la primer coincidencia\r\n    return heroes.find((hero) => hero.id === id);\r\n  } else return null;\r\n};\r\n","import React from 'react'\r\nimport HeroesList from '../heroes/HeroesList'\r\n\r\nconst MarvelScreen = () => {\r\n    return (\r\n        <div>\r\n            <HeroesList publisher='Marvel Comics' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MarvelScreen\r\n","import React, { useMemo } from 'react' //, useState \r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport queryString from 'query-string';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { getHeroesByName } from '../../selectors/getHeroesByName'\r\nimport HeroCard from '../heroes/HeroCard';\r\n\r\n\r\n// Para caprturar lo value de toodos los input que se tengan en el formulario se requiere un custom hook conocido\r\n// como Los value son retornados en un objeto el cual desestructuraremos para obtener los inputs requeridos\r\nconst SearchScreen = () => {\r\n\r\n    // Usaremos el hook location, el cual nos permite la ruta actual en la que se este\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    // console.log(location);\r\n    // Object { pathname: \"/search\", search: \"\", hash: \"\", state: null, key: \"default\" }\r\n    // de aqui nos interesan el pathname y el search, es decir, la ruta actual y el query de busqueda.\r\n    // requerimos instalar: npm i query-string\r\n\r\n    //  q='': default value cuando no existe un query de busqueda en la url\r\n    const { q = '' } = queryString.parse(location.search) // el metodo parse se usa para capturar el location.search\r\n    // console.log(q); // q = 'spider'\r\n    // El queryString permite extraer el campo search del objeto location, el cual almacena en sus campos los\r\n    // diferentes contenidos de la url\r\n\r\n    // Para capturar los valores del formulario usamos el custom hook useForm\r\n    const [formValues, handleInputChange] = useForm({ // definimos el objeto initialState\r\n        // searchText se inicializa con el valor de la query q\r\n        searchText: q\r\n    })\r\n    // El useForm permite que el texto de busqueda (query) en el input se guarde en un estado interno al useForm.\r\n    // Si se recarga la pagina, a fin de cuentas, se actualiza el texto del input con el valor del search en el\r\n    // objeto location, el cual se captura como una peticion (q) usando el metodo parse de la libreria queryString.\r\n\r\n    // useForm retorna un arreglo con 2 elementos; los formValues son todos los valores del formaulario que se esta\r\n    // capturando y la funcion llamada handleInputChange que permite conectar cada input value con su estado, es\r\n    // decir, que esta funcion permite actualizar el estado asignado a cada input value usando como identificador\r\n    // el name de cada input.\r\n    // Nota\" El metodo handleInputChange es el metodo (event-listener) que se asigna al evento onChange\r\n\r\n    const { searchText } = formValues;\r\n    // formaValues contiene todos los elementos del formulario, es decir, que si este tuviese 50 inputs diferentes\r\n    // se podria capturar cada value respectivo y extraerlos todos a partir de destructuracion\r\n\r\n    // const [searchText, setSearchText] = useState(q);\r\n    // const [heroesQuery, setHeroesQuery] = useState([]);\r\n\r\n    // const handleInputChange = (e) => {\r\n    //     setSearchText(e.target.value);\r\n    // }\r\n\r\n    const handleSearch = (e) => {\r\n        e.preventDefault();\r\n        //setHeroesQuery(getHeroesByName(searchText));\r\n        // Al actualizar el navigate con el texto de busqueda (query) en el input, este texto aparece al final de la\r\n        // url y por ende, de forma implicita se actualiza el campo search del objeto location, lo cual implica que si\r\n        // se recarga la pagina, entonces, con el queryString.parse se extraera nuevamente el query (q), que se envia\r\n        // como estado inicial del custom hook useForm, que es un hook de estado para el manejo de multiples estados,\r\n        // y por ende, retorna un objeto que podria contener multiples estados el cual se desestructura para obetener\r\n        // el campo searchText que se asigna al value del input, y ademas tambien retorna una funcion para el manejo\r\n        // de multiples estados; const [formValues, handleInputChange] = useForm({searchText: q})\r\n        navigate(`?q=${searchText}`)\r\n        // Al hacer submit se actualiza el campo search de la url y por ende, se actualiza el location.search, al cual\r\n        // se puede acceder con la referencia q\r\n    }\r\n\r\n    // Solamente cuando se detecte un cambio en q se llama a getHeroesByName. El segundo parametro es un array con las\r\n    // dependencias escuchadas, es decir que un cambio en cualquiera de estas, ejecuta el llamado al callback function,\r\n    // el cual toma las dependencias como parametros; en este caso un cambio en q provoca un llamado a getHeroesByName\r\n    const heroes = useMemo(() => getHeroesByName(q), [q]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Search Screen</h1>\r\n            <hr />\r\n            <div className=\"row\">\r\n                {/* Se toman 5 de 12 columnas en el row */}\r\n                <div className=\"col-5\">\r\n                    {/* <h3>\r\n                        Buscar heroe\r\n                    </h3> */}\r\n                    <form action=\"search\"\r\n                        className='row g-3' // g-3: el 3 indica la separacion los hijos directos (divs) en el form\r\n                        onSubmit={handleSearch}\r\n                    >\r\n                        <div className='col-12'>\r\n                            <label htmlFor=\"heroes\" className='form-label'>Buscar héroe: </label>\r\n                            <input\r\n                                id='heroes'\r\n                                type=\"text\"\r\n                                placeholder='Digite un nombre de heroe'\r\n                                className='form-control'\r\n                                autoComplete='off' // Se desactivan sugerencias de busqueda\r\n                                // Se asigna un nombre al campo input; este sera el nombre con el que se podra obtener\r\n                                // el value del input a traves del hook useForm. El nombre debe ser unico ya que este\r\n                                // sera el identificador para obtener el value\r\n                                name=\"searchText\"\r\n                                onChange={handleInputChange}\r\n                                value={searchText} // El valor del value se guarda en el searchText y viceversa \r\n                            />\r\n                        </div>\r\n                        {/* El contenedor div es col-12 pero el hijo button tiene su tamaño por default */}\r\n                        <div className='col-12'>\r\n                            <button className='btn btn-primary' type='submit'>Buscar</button>\r\n                        </div>\r\n                    </form>\r\n\r\n                </div>\r\n                {/* Se toman 7 de 12 columnas en el row*/}\r\n                <div className=\"col-7\">\r\n                    <h3>\r\n                        Resultados\r\n                    </h3>\r\n                    <div className=\"row row-cols-xs-2 row-cols-sm-3 row-cols-md-3 g-4\">\r\n                        {\r\n                            heroes.map((hero) => (\r\n                                <HeroCard key={hero.id} {...hero} />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchScreen\r\n","// Esta es solo una funcion no un componente (su nombre empieza en minuscula)\r\nimport { heroes } from \"../data/heroes\";\r\n\r\nexport const getHeroesByName = (name = \"\") => { // valor por defecto string vacio\r\n\r\n  // console.log('llamado a getHeroesByName');\r\n  if (name.length === 0) {\r\n    return [];\r\n  } else {\r\n      name = name.trim().toLowerCase();\r\n      // retorna todas los heroes que contengan el string name dentro de sus nombres\r\n    return heroes.filter((hero) => hero.superhero.toLowerCase().includes(name));\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { startLogout } from \"../../actions/auth\";\r\n\r\nconst NavBar = () => {\r\n    // El 'hook' useNavigate nos permite empujar a los usuarios\r\n    // en las diferentes rutas sin hacer recargas de las paginas\r\n\r\n    const name = useSelector(({ auth }) => auth.name);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleLogOut = () => {\r\n        dispatch(startLogout());\r\n    }\r\n\r\n    return ( // fixed-top\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark sticky-top\">\r\n            <div className=\"container-fluid\">\r\n                <Link\r\n                    className=\"navbar-brand\"\r\n                    to='/'\r\n                >\r\n                    Heroes\r\n                </Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                    <div className=\"navbar-nav\">\r\n                        {/* NavLink nos permite retornar si la ruta no esta activa, que nos da control sobre el active */}\r\n                        {/* Al parecer isActive es un estado de <NavLink> que se retorna a traves de props */}\r\n                        <NavLink // Se desestructuran las props\r\n                            className={({ isActive }) => `nav-item nav-link ${isActive && 'active'}`} // isActive ? 'active' : ''\r\n                            // aria-current=\"page\"\r\n                            to='/marvel'\r\n                        >\r\n                            Marvel\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className={({ isActive }) => `nav-item nav-link ${isActive && 'active'}`}\r\n                            to='/dc'\r\n                        >\r\n                            DC\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className={({ isActive }) => `nav-item nav-link ${isActive && 'active'}`}\r\n                            to='/search'\r\n                        >\r\n                            Search\r\n                        </NavLink>\r\n                        {/* <NavLink\r\n                            className=\"nav-item nav-link desabled\"\r\n                            to='/'\r\n                        >\r\n                            Desabled\r\n                        </NavLink> */}\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-end collapse navbar-collapse w-100\" id=\"navbarNav\">\r\n                        <span className=\"nav-item nav-link text-info\">\r\n                            { name }\r\n                        </span>\r\n                        <button\r\n                        className=\"nav-item btn btn-outline-secondary\" type=\"submit\"\r\n                        onClick={() => handleLogOut()}>\r\n                        Log out\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    ) //  dual-collapse2 order-3\r\n}\r\n\r\nexport default NavBar\r\n","import { Routes, Route } from \"react-router-dom\";\r\nimport DcScreen from \"../components/dc/DcScreen\";\r\nimport HeroScreen from \"../components/heroes/HeroScreen\";\r\nimport MarvelScreen from \"../components/marvel/MarvelScreen\";\r\nimport SearchScreen from \"../components/search/SearchScreen\";\r\nimport NavBar from \"../components/ui/NavBar\";\r\nconst DashboardRouter = () => {\r\n    return (\r\n        <>\r\n            <NavBar />\r\n            <div className='container-fluid'>\r\n                <Routes>\r\n                    {/* Aqui nuestras rutas no requieren '/' ya que este se asigna en el\r\n                    router padre (AppRouter) al llamar este router con '/*'. Ademas puesto\r\n                    que el Router se llama en el padre, aqui en el hijo no es requerido */}\r\n                    <Route path=\"dc\" element={<DcScreen />} />\r\n                    <Route path=\"marvel\" element={<MarvelScreen />} />\r\n                    <Route path=\"search\" element={<SearchScreen />} />\r\n                    {/* Todo lo que aparezca despues de la ruta 'hero/' establecera el campo heroId en los params de la peticion */}\r\n                    <Route path=\"hero/:heroId\" element={<HeroScreen />} />\r\n                    {/* Este '/' no se retira ya que representa la ruta raiz, y al usar el '/' se representa con claridad */}\r\n                    <Route path=\"/\" element={<MarvelScreen />} />\r\n                </Routes>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DashboardRouter\r\n","// Router para el manejo de rutas privadas, accesibles solo cuando\r\n// el usuario ha ingresado satisfactoriamente al aplicativo.\r\n// Aqui se debe verificar si el usuario esta logeado, si es asi se\r\n// retorna un componente y sino el usuario es enviado a otra ruta\r\n\r\nimport { useEffect } from \"react\"\r\nimport { Navigate, useLocation } from \"react-router-dom\";\r\n\r\n// A traves de las props se puede acceder a los children, es decir\r\n// los componentes de orden inferior a PrivateRouter, en este caso\r\n// se accede a DashboardRouter\r\nconst PrivateRouter = ({ children, loggedIn }) => {\r\n\r\n    // Me permite conocer la ruta actual en el aplicativo\r\n    // Aqui se obtienen los strings pathname y search\r\n    const { pathname, search } = useLocation();\r\n    useEffect(() => {\r\n        console.log(loggedIn);\r\n        if (loggedIn) {\r\n            // Esta accion se podria realizar solo al hacer logout\r\n            // pero se tiene el inconveniente de que si el token se\r\n            // vence, el usuario nunca da click en logout, en cuyo\r\n            // caso la ultima ruta nunca sera guardada. Si se\r\n            // almacenara la ruta actual en el context, el codigo\r\n            // seria un poco mas complejo y se deberia hacer uso\r\n            // del dispath cada vez que se actualice la ruta, por\r\n            // ello tambien se requiere useEffect. Al final, por la \r\n            // persistencia es preferible el localStorage\r\n            localStorage.setItem('lastPath', pathname + search);\r\n        }\r\n    }, [loggedIn, pathname, search])\r\n\r\n    // Si el usuario esta autenticado entonces se da paso al\r\n    // componente hijo, es decir, que se retorna el componente\r\n    // hijo DashboardRouter y sino se retorna un componente\r\n    // Navigate que devuelve el usuario hacia el login\r\n    return (\r\n        loggedIn ? children : <Navigate to='/login' />\r\n    )\r\n}\r\n\r\nexport default PrivateRouter\r\n\r\n// Nota: El componente <Navigate /> es una especie de router dummy\r\n// que permite hacer navegacion\r\n\r\n// Nota: los componentes hijos pueden se uno o varios y si asi\r\n// fuera tambien se podria acceder a uno en paricular\r\n","// import { useContext } from \"react\"\r\nimport { Navigate } from \"react-router-dom\";\r\n// import { AuthContext } from \"../auth/authContext\"\r\n\r\n// A traves de las props se puede acceder a los children, es decir\r\n// los componentes de orden inferior a PublicRouter, en este caso\r\n// se accede a LoginScreen\r\nconst PublicRouter = ({ children, loggedIn }) => {\r\n    // Se podria tener diferentes tipos de contextos, p. ej. de\r\n    // manejo de API, o de configuraciones en el aplicativo, o\r\n    // de autenticacion como en este caso\r\n    // const { logged } = useContext(AuthContext).user;\r\n\r\n    // Si un usuario autenticado trata de acceder al '/login'\r\n    // este es enviado al home screen, en caso contrario se le da\r\n    // paso el paso al LoginScreen\r\n    return (\r\n        <div className='container-fluid mt-3'>\r\n            {loggedIn ? <Navigate to={localStorage.getItem('lastPath') || '/'} /> : children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PublicRouter\r\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport { login } from \"../actions/auth\";\r\nimport LoginScreen from \"../components/Sign/LoginScreen\";\r\nimport RegisterScreen from \"../components/Sign/RegisterScreen\";\r\nimport DashboardRouter from \"./DashboardRouter\";\r\nimport PrivateRouter from \"./PrivateRouter\";\r\nimport PublicRouter from \"./PublicRouter\";\r\nimport { firebase } from \"../firebase/firebase-config\"\r\n\r\nconst AppRouter = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [loggedIn, setLoggedIn] = useState(false)\r\n    // En tanto se reestablece el auth state, a causa de una recarga de pagina, el\r\n    // componente retorna un loading spinner\r\n    const [isAuthReloading, setIsAuthReloading] = useState(true)\r\n    // Para al momento de recargar establecer el estado de autenticacion auth que\r\n    // previamente se establecio en el objeto firebase, creamos el siguiente useEffect.\r\n    useEffect(() => {\r\n        // Un observable es una especie de listener de firebase que detecta cambios en\r\n        // el usuario y en base a ello realiza una actualizacion, pero se le debe indicar\r\n        // cuales son los cambios que debe realizar en la atualizacion\r\n        // Al recargar la pagina se genera un cambio en el objeto firebase, el cual verifica\r\n        // sus datos contra los que se encuentran en el proyecto en el servidor de Firebase.\r\n        // Cambios es un usuario que ya no esta logueado producen un argumeto user vacio\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            // Si user existe acceda a la propiedad uid y si uid no esta vacio entra al if\r\n            if (user?.uid) { // Cuando se hace logout que pasa ...\r\n                // Se establece el estado del user en la app\r\n                setLoggedIn(true);\r\n                dispatch(login(user.uid, user.displayName))\r\n            } else {\r\n                setLoggedIn(false);\r\n            }\r\n            setIsAuthReloading(false);\r\n        });\r\n    })\r\n\r\n    if (isAuthReloading) {\r\n        return (\r\n            <div className=\"d-flex justify-content-center mt-5\">\r\n                <div\r\n                    className=\"spinner-grow text-info\"\r\n                    role=\"status\"\r\n                    style={{ width: \"3rem\", height: \"3rem\" }}\r\n\r\n                />\r\n                <div\r\n                    className=\"spinner-grow text-info\"\r\n                    role=\"status\"\r\n                    style={{ width: \"3rem\", height: \"3rem\" }}\r\n                />\r\n                <div\r\n                    className=\"spinner-grow text-info\"\r\n                    role=\"status\"\r\n                    style={{ width: \"3rem\", height: \"3rem\" }}\r\n                />\r\n            </div>\r\n        )\r\n    } else {\r\n\r\n        return (\r\n            <Router>\r\n                <Routes>\r\n\r\n                    {/* RUTAS PRIVADAS */}\r\n                    <Route path=\"/*\" element={\r\n                        <PrivateRouter loggedIn={loggedIn} >\r\n                            <DashboardRouter />\r\n                        </PrivateRouter>\r\n                    } />\r\n\r\n                    {/* RUTAS PÚBLICAS */}\r\n                    {/* Nuestra ruta al '/login' no tendra NavBar */}\r\n                    <Route path=\"/login\" element={\r\n                        <PublicRouter loggedIn={loggedIn}>\r\n                            <LoginScreen />\r\n                        </PublicRouter>\r\n                    } />\r\n                    <Route path=\"/register\" element={<RegisterScreen />} />\r\n\r\n                </Routes>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppRouter\r\n","import { types } from \"../types\";\r\n\r\nconst initialState = {\r\n    // Se crea variable para bloquear el boton de login\r\n    loading: false,\r\n    // Se crea variable para mensaje de error\r\n    errMsg: null\r\n}\r\n\r\n// Los diferentes retornos de un reducer corresponden a\r\n// los diferentes estados de un proceso en particular\r\nexport const uiReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.uiSetError:\r\n            // se llama en formVerification\r\n            return {\r\n                ...state,\r\n                errMsg: action.payload\r\n            };\r\n\r\n        case types.uiRemoveError:\r\n            return {\r\n                ...state,\r\n                errMsg: null\r\n            };\r\n\r\n        case types.uiStartLoading:\r\n            // Cuando el usuario da click al boton submit este se deshabilita\r\n            // mientras la peticion se ejecuta, para evitar hacer un nuevo\r\n            // submit cuando la petcion del primer submit aun esta en proceso\r\n            // loading sera enviado al atributo disable del submit button en el login\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n\r\n        case types.uiFinishLoading:\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","// Esta es la store que usara Redux\r\nimport { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { authReducer } from \"../reducers/authReducer\";\r\nimport { uiReducer } from \"../reducers/uiReducer\";\r\n// import { uiReducer } from \"../reducers/uiReducer\";\r\n\r\n// Ojeto para almacenar todos los reducers que se requieran\r\nconst reducers = combineReducers({\r\n    auth: authReducer, // authentication state\r\n    ui: uiReducer // user interface state\r\n});\r\n// Si requiere usar las herramientas de redux develpement tools y tambien necesita usar un middleware asincrono\r\n// entonces necesitamos que el middleware se envie como una varible de composeEnhancers\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    // enviamos como argumento el applyMiddleware que nos pide thunk para poder funcionar\r\n    composeEnhancers( applyMiddleware( thunk ) )\r\n);\r\n","// Funcion que siempre devuelve un estado, y funcion pura, es decir,\r\n// que todo se debe resolver a partir de los argumentos que le llegan\r\n// y no depender de funciones externas\r\n\r\nimport { types } from \"../types\";\r\n\r\n// Estado de autenticacion, se podra tener un store con diferentes state\r\n// const state = {\r\n//     // user id que almacena firebase\r\n//     uid: 'flksjgla846f4ga',\r\n//     displayName: 'Fredy Alexander Hoyos Ariza', // nombre guardado en la cuenta en el registro\r\n//     password:\r\n// }\r\nexport const authReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n      \r\n    case types.login:\r\n      return {\r\n          uid: action.payload.uid,\r\n          name: action.payload.displayName // se llama displayName puesto que asi se obtiene de firebase\r\n      };\r\n\r\n    case types.logout:\r\n      return {}; // tambien podria devolver los campos uid y name con cadenas vacias\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react' // rafce\r\nimport AppRouter from './routers/AppRouter'\r\nimport { Provider } from 'react-redux' // Se importa el Provider de react redux\r\nimport { store } from './store/store'\r\n\r\nconst HeroesApp = () => {\r\n\r\n    // Ya no necesitamos crear un contexto ya redux nos brinda un context\r\n    // Provider que podemos usar\r\n\r\n    // Se define todo el aplicativo como un hijo del Provider.\r\n    // A partir de aqui se envia un contexto a todo el aplicativo.\r\n    // Quien realmente provee el contexto es el Provider de redux,\r\n    // pero el Provider requiere de la store de reducers para enviarla a\r\n    // lo largo del aplicativo, ya que esta es una especie de fuente de\r\n    // verdad del estado del aplicativo. Ahora al revisar en el arbol de\r\n    // componentes (navegador) vemos que despues del HeroesApp aparece el\r\n    // Provider de redux. ya no se requiere state y dispatch sino la store\r\n    return (\r\n\r\n        // Nota: se provee a traves del Provider y se obtiene a traves del\r\n        // useContext\r\n        <Provider store={store}>\r\n            {/* Se envia la store a traves del\r\n            context del aplicativo, para que de esta forma los estados\r\n            puedan ser actulizados, desde otras vistas y usando el metodo\r\n            dispatch. P. ej. donde se requiera actulizar user Luego de\r\n            una autenticacion o donde se requiera verificar si el user\r\n            esta autenticado.*/}\r\n            <AppRouter />\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default HeroesApp\r\n\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport HeroesApp from \"./HeroesApp\";\nimport \"./index.css\";\n\nReactDOM.render(<HeroesApp />, document.getElementById(\"root\"));"],"sourceRoot":""}